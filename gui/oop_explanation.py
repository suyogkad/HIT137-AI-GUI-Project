# gui/oop_explanation.py
def get_oop_explanation() -> str:
    return (
        "Where we used OOP concepts in this project:\n"
        "\n"
        "• Encapsulation:\n"
        "  - Each model pipeline is created inside its module and kept as a private singleton\n"
        "    (see models/text_model.py and models/image_model.py). The pipeline object is not\n"
        "    exposed directly; we call helper functions instead.\n"
        "\n"
        "• Decorators:\n"
        "  - @timeit in core/decorators.py measures how long each model call takes.\n"
        "    It wraps the callable without changing its core logic.\n"
        "\n"
        "• Polymorphism (conceptual):\n"
        "  - We define a shared interface pattern: a function that takes an input and returns\n"
        "    a list of {label, score}. Although the implementations differ (text vs image),\n"
        "    the GUI can handle both uniformly.\n"
        "\n"
        "• Method Overriding (demonstration):\n"
        "  - See core/base_classes.py where ImageModel and TextModel override run() from\n"
        "    ModelBase.\n"
        "\n"
        "• Multiple Inheritance (simple demonstration):\n"
        "  - See core/base_classes.py (Optional mixin) showing a LoggingMixin that can be\n"
        "    combined with ModelBase to add logging capability without duplicating code.\n"
        "\n"
        "This text is kept short and friendly, while the code shows the actual usage."
    )
